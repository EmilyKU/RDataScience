update.packages(ask = FALSE, checkBuilt = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# the dplyr package
library(nycflights13)
library(tidyverse)
### 5.1.2 nycflights13
flights
# int stands for integers.
# dbl stands for doubles, or real numbers.
# chr stands for character vectors, or strings.
# dttm stands for date-times (a date + a time).
# lgl stands for logical, vectors that contain only TRUE or FALSE.
# fctr stands for factors, which R uses to represent categorical variables with fixed possible values.
# date stands for dates.
### 5.1.3 dplyr basics
# Pick observations by their values (filter()).
# Reorder the rows (arrange()).
# Pick variables by their names (select()).
# Create new variables with functions of existing variables (mutate()).
# Collapse many values down to a single summary (summarise()).
# conjunction with group_by() which changes the scope of each function from operating on the entire dataset to operating on it group-by-group.
## 5.2 Filter rows with filter()
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
### 5.2.1 Comparisons
# Logical comparisons, <, <=, >, >=, !=
# >, >=, <, <=, != (not equal), and == (equal).
# Instead of relying on ==, use near()
near(sqrt(2) ^ 2,  2)
near(1 / 49 * 49, 1)
### 5.2.2 Logical operators
# Boolean operators yourself: & is "and", | is "or", and ! is "not".
filter(flights, month == 11 | month == 12)
# A useful short-hand for this problem is x %in% y. This will select every row where x is one of the values in y.
nov_dec <- filter(flights, month %in% c(11, 12))
# De Morgan's law: !(x & y) is the same as !x | !y, and !(x | y) is the same as !x & !y
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)  # the two are the same in results
### 5.2.3 Missing values
# to determine if a value is missing, use is.na():
x <- NA
is.na(x)
# filter() only includes rows where the condition is TRUE; it excludes both FALSE and NA values. If you want to preserve missing values, ask for them explicitly:
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
# arrange() works similarly to filter() except that instead of selecting rows, it changes their order.
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
# mutate() always adds new columns at the end of your dataset
#  to see all the columns - View().
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# only want to keep the new variables, use transmute()
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# 5.5.1 Useful creation functions
# %/% (integer division) and %% (remainder), where x == y * (x %/% y) + (x %% y)
transmute(flights,
dep_time,
hour = dep_time %/% 100,  # %/% the result is an integer
minute = dep_time %% 100  # %% the result is the remainder, say, 5 hours, remaining 17 minutes
)
# lead() and lag() allow you to refer to leading or lagging values.
(x <- 1:10)
lag(x)
lead(x)
cumsum(x)
cummean(x)
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
min_rank(desc(y))
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
## 5.6.1 Combining multiple operations with the pipe
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# using the pipe, %>% to rewrite the above codes, %>% means "then".
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
### 5.6.2 Missing values
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# na.rm argument removes the missing values prior to computation.
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
### 5.6.3 Counts
# count (n()), or a count of non-missing values (sum(!is.na(x))).
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
# variation decreases as the sample size increases
# switch from %>% to +
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
# Convert to a tibble so it prints nicely
# tibble() is a nice way to create data frames
tibble(x = letters)
tibble(x = 1:5, y = x ^ 2)
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
batting <- as_tibble(Lahman::Batting) # Lahman package, Batting function
(x <- 1:10)
lag(x)
lead(x)
cumsum(x)
cummean(x)
install.packages("Lahman")
batting <- as_tibble(Lahman::Batting) # Lahman package, Batting function
View(batting)
View(batting)
Lahman::Batting
a<- Lahman::Batting
a
View(a)
View(a)
View(batting)
View(batting)
View(batting)
View(batting)
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# <!--categorical-->
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut)) #bar for categorical variables
# dplyr::count()
diamonds %>%
count(cut)
# <!--continuous-->
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)  #histogram for continuous variables, displays the counts
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1) # freqpoly displays lines
ggplot(data = mpg)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size=class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages("hexbin")
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
library(tidyverse)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
mod
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
mod1 <- lm(price ~ carat, data = diamonds)
mod1
getwd()
setwd("V:/AAI docs/R_For_Data_Science_Review 20180706/I Explore")
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
library(tidyverse)
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
mod
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
ggplot(data = diamonds2) +
geom_point(mapping = aes(x = carat, y = resid))
mod1 <- lm(price ~ carat, data = diamonds)
mod1
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
mod2 <- lm(log(price) ~ log(cut), data = diamonds2)
mod2 <- lm(log(price) ~ log(cut), data = diamonds)
head(diamonds)
head(diamonds)
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
install.packages(c("BDgraph", "dplyr", "lme4", "mclust", "openssl", "packrat", "Rcpp", "RJSONIO", "robCompositions", "rockchalk", "rrcov", "rsconnect"))
getwd()  #current working directory
setwd("/path/to/my/CoolProject") # set the working directory, not recommended
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/I Explore")
# set the working directory, not recommended
# setwd("/path/to/my/CoolProject")
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/I Explore")
>
# set the working directory, not recommended
# setwd("/path/to/my/CoolProject")
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/I Explore")
