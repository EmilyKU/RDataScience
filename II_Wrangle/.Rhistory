update.packages(ask = FALSE, checkBuilt = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# the dplyr package
library(nycflights13)
library(tidyverse)
### 5.1.2 nycflights13
flights
# int stands for integers.
# dbl stands for doubles, or real numbers.
# chr stands for character vectors, or strings.
# dttm stands for date-times (a date + a time).
# lgl stands for logical, vectors that contain only TRUE or FALSE.
# fctr stands for factors, which R uses to represent categorical variables with fixed possible values.
# date stands for dates.
### 5.1.3 dplyr basics
# Pick observations by their values (filter()).
# Reorder the rows (arrange()).
# Pick variables by their names (select()).
# Create new variables with functions of existing variables (mutate()).
# Collapse many values down to a single summary (summarise()).
# conjunction with group_by() which changes the scope of each function from operating on the entire dataset to operating on it group-by-group.
## 5.2 Filter rows with filter()
filter(flights, month == 1, day == 1)
jan1 <- filter(flights, month == 1, day == 1)
(dec25 <- filter(flights, month == 12, day == 25))
### 5.2.1 Comparisons
# Logical comparisons, <, <=, >, >=, !=
# >, >=, <, <=, != (not equal), and == (equal).
# Instead of relying on ==, use near()
near(sqrt(2) ^ 2,  2)
near(1 / 49 * 49, 1)
### 5.2.2 Logical operators
# Boolean operators yourself: & is "and", | is "or", and ! is "not".
filter(flights, month == 11 | month == 12)
# A useful short-hand for this problem is x %in% y. This will select every row where x is one of the values in y.
nov_dec <- filter(flights, month %in% c(11, 12))
# De Morgan's law: !(x & y) is the same as !x | !y, and !(x | y) is the same as !x & !y
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)  # the two are the same in results
### 5.2.3 Missing values
# to determine if a value is missing, use is.na():
x <- NA
is.na(x)
# filter() only includes rows where the condition is TRUE; it excludes both FALSE and NA values. If you want to preserve missing values, ask for them explicitly:
df <- tibble(x = c(1, NA, 3))
filter(df, x > 1)
filter(df, is.na(x) | x > 1)
# arrange() works similarly to filter() except that instead of selecting rows, it changes their order.
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
arrange(df, desc(x))
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
# mutate() always adds new columns at the end of your dataset
#  to see all the columns - View().
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# only want to keep the new variables, use transmute()
transmute(flights,
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# 5.5.1 Useful creation functions
# %/% (integer division) and %% (remainder), where x == y * (x %/% y) + (x %% y)
transmute(flights,
dep_time,
hour = dep_time %/% 100,  # %/% the result is an integer
minute = dep_time %% 100  # %% the result is the remainder, say, 5 hours, remaining 17 minutes
)
# lead() and lag() allow you to refer to leading or lagging values.
(x <- 1:10)
lag(x)
lead(x)
cumsum(x)
cummean(x)
y <- c(1, 2, 2, NA, 3, 4)
min_rank(y)
min_rank(desc(y))
row_number(y)
dense_rank(y)
percent_rank(y)
cume_dist(y)
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
## 5.6.1 Combining multiple operations with the pipe
by_dest <- group_by(flights, dest)
delay <- summarise(by_dest,
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
# using the pipe, %>% to rewrite the above codes, %>% means "then".
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
### 5.6.2 Missing values
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# na.rm argument removes the missing values prior to computation.
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay, na.rm = TRUE))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
### 5.6.3 Counts
# count (n()), or a count of non-missing values (sum(!is.na(x))).
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
ggplot(data = delays, mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
# variation decreases as the sample size increases
# switch from %>% to +
delays %>%
filter(n > 25) %>%
ggplot(mapping = aes(x = n, y = delay)) +
geom_point(alpha = 1/10)
# Convert to a tibble so it prints nicely
# tibble() is a nice way to create data frames
tibble(x = letters)
tibble(x = 1:5, y = x ^ 2)
tibble(x = 1:3, y = list(1:5, 1:10, 1:20))
batting <- as_tibble(Lahman::Batting) # Lahman package, Batting function
(x <- 1:10)
lag(x)
lead(x)
cumsum(x)
cummean(x)
install.packages("Lahman")
batting <- as_tibble(Lahman::Batting) # Lahman package, Batting function
View(batting)
View(batting)
Lahman::Batting
a<- Lahman::Batting
a
View(a)
View(a)
View(batting)
View(batting)
View(batting)
View(batting)
library(dplyr)
library(nycflights13)
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
# <!--categorical-->
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut)) #bar for categorical variables
# dplyr::count()
diamonds %>%
count(cut)
# <!--continuous-->
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)  #histogram for continuous variables, displays the counts
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1) # freqpoly displays lines
ggplot(data = mpg)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size=class))
ggplot(mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color=class))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages(c("digest", "evaluate", "mime", "stringi", "tidyselect"))
install.packages("blavaan")
# pictures and illustration for presentation 10
library(lavaan)
library(mvtnorm)
library(MASS)
library(MVN)
load("C:/Users/m793z420/AppData/Local/Packages/Microsoft.MicrosoftEdge_8wekyb3d8bbwe/TempState/Downloads/dlmr_calibration.rda")
View(dlmr_calibration)
View(dlmr_calibration)
install.packages("lattice")
install.packages(c("broom", "haven", "processx", "RcppEigen", "readr", "rio", "rsconnect", "survival"))
#Wickham-2014-Tidy Data-pp.15-19, example)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
#Wickham-2014-Tidy Data-pp.15-19, example)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
library(lme4)
#Wickham-2014-Tidy Data-pp.15-19, example)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
#library(lme4)
library(foreign)
library(stringr)
#Wickham-2014-Tidy Data-pp.15-19, example)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
#library(lme4)
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = T)
#library(tidyverse)
#library(lme4)
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = T)
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
deaths <- read.bz2("deaths08.csv.bz2", as.is = T)
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
library(foreign)
deaths <- read.bz2("deaths08.csv.bz2", as.is = T)
library(foreign)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = T)
library(foreign)
deaths <- read.dbf("DEF-SSA08.dbf", as.is = T)
foreign
#library(tidyverse)
#library(lme4)
library(foreign)
# library(stringr)
# options(stringsAsFactors = FALSE)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = FALSE)
library(foreign)
deaths<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
library(foreign)
deaths<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
str(x)
summary(x)
#Wickham-2014-Tidy Data-p.15, example-case study
hod2 <- count(deaths, c("hod", "cod"))
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
deaths<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
str(x)
summary(x)
#Wickham-2014-Tidy Data-p.15, example-case study
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
#Wickham-2014-Tidy Data-p.15, example-case study
hod2 <- count(deaths, c("hod", "cod"))
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
deaths<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
str(x)
summary(x)
head(deaths)
head(deaths)
View(deaths)
View(deaths)
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
example<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
str(x)
summary(x)
head(example())
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
example<- read.dbf(system.file("files/sids.dbf", package="foreign")[1])
str(x)
summary(x)
head(example)
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
deaths<- read.dbf(system.file("files/DEF-SSA08.DBF", package="foreign")[1])
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
deaths<- read.dbf(system.file("files/DEF-SSA08.dbf", package="foreign")[1])
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
deaths<- read.dbf(system.file("files/DEF-SSA08.dbf", package="foreign")[1])
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = T)
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf("DEF-SSA08.DBF", as.is = T)
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf(system.file("files/DEF-SSA08.DBF", package="foreign")[1]))
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf(system.file("files/DEF-SSA08.DBF"))
#Wickham-2014-Tidy Data-pp.15-19, example-case study
library(foreign)
library(stringr)
options(stringsAsFactors = FALSE)
deaths <- read.dbf(system.file("files/DEF-SSA08.dbf"))
names(example) <- c("yob", "mob", "dob", "sex", "age_unit", "age", "nation",
"marital", "stateL", "countyL", "locationL", "popL", "job", "edu", "derhab",
"statD", "countyD", "locationD", "popD", "placeD", "yod", "mod", "dod",
"hod", "minod", "med_help", "cod", "des", "presume", "working", "injury_loc",
"domestic_v", "autopsy", "certifier", "state_reg", "county_reg", "year_reg",
"mon_reg", "day_reg", "weight", "year_cert", "mon_cert", "day_cert",
"pregnant", "labor_cod", "labor_c")
setwd("V:/AAI docs/Emily Projects/15. GitHub 20181005")
load("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle/deaths08.csv.bz2")
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
deaths<-read.csv("deaths08.csv.bz2")
#Wickham-2014-Tidy Data-pp.15-19, example-case study
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
deaths<-read.csv("deaths08.csv.bz2")
hod2 <- count(deaths, c("hod", "cod"))
head(deaths)
head(deaths)
head(deaths)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
hod2 <- count(deaths, c("hod", "cod"))
library(tidyverse)
species1 <- count(iris, Species)
# hod2 <- count(deaths, c("hod", "cod"))
head(iris)
head(deaths)
library(tidyverse)
head(iris)
hod2 <- count(deaths, c(hod, cod))
library(tidyverse)
head(iris)
hod2 <- count(deaths, deaths$hod)
library(tidyverse)
hod2 <- count(deaths, deaths$hod)
head(deaths)
library(tidyverse)
hod2 <- count(deaths, deaths$hod, deaths$cod)
library(tidyverse)
hod2 <- count(deaths, deaths$hod, deaths$cod)
hod2
library(tidyverse)
hod2 <- count(deaths, deaths$hod = "hod", deaths$cod = "cod")
library(tidyverse)
hod2 <- count(deaths, deaths$hod = as.name("hod") , deaths$cod = as.name("cod"))
library(tidyverse)
hod2 <- count(deaths, deaths$hod = as.name(hod) , deaths$cod = as.name(cod))
library(tidyverse)
hod2 <- count(deaths, deaths$hod, deaths$cod)
hod2
hod2 <- subset(hod2, !is.na(hod))
hod2 <- subset(hod2, !is.na(deaths$hod))
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
hod2
hod2 <- subset(hod2, !is.na=deaths$hod)
hod2 <- subset(hod2, !is.na==deaths$hod)
hod2 <- subset(hod2, !is.na = TRUE)
hod2 <- subset(hod2, !is.na = F)
?!is.na
?is.na
hod2 <- subset(hod2, !is.na (hod))
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
hod2
hod3 <- subset(hod2, !is.na (hod)) #remove the missing values
hod4 <- join(hod3, codes, by = "cod")
hod4 <- left_join(hod3, codes, by = "cod")
library(stringr)
codes<-read.csv("icd-10.csv")
#hod4 <- left_join(hod3, codes, by = "cod")
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
library(stringr)
codes<-read.csv("icd-10.csv")
#hod4 <- left_join(hod3, codes, by = "cod")
hod4 <- left_join(hod3, by = "cod")
hod4 <- left_join(hod3, hod2, by = "cod")
hod4 <- left_join(hod3, hod2, by = "cod")
hod4
# subsetting
hod3 <- subset(hod2, !is.na (hod)) #remove the missing values in hod.
head(hod3)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
head(hod2)
# subsetting
hod3 <- subset(hod2, !is.na (hod)) #remove the missing values in hod.
head(hod3)
# subsetting
hod3 <- subset(hod2, is.na (hod)) #remove the missing values in hod.
head(hod3)
# subsetting
hod3 <- subset(hod2, !is.na (hod)) #remove the missing values in hod.
head(hod3)
hod5 <- ddply(hod4, "cod", transform, prop = freq / sum(freq))
library(tidyverse)
hod5 <- ddply(hod4, "cod", transform, prop = freq / sum(freq))
library(dplyr)
hod5 <- ddply(hod4, "cod", transform, prop = freq / sum(freq))
dplyr
library(plyr)
hod5 <- ddply(hod4, "cod", transform, prop = freq / sum(freq))
#joining
hod4 <- left_join(hod2, hod3, by = "cod")
head(hod4)
library(plyr)
hod5 <- ddply(hod4, "cod", transform, prop = freq / sum(freq))
# subsetting
hod3 <- subset(hod2, !is.na (hod)) #remove the missing values in hod.
head(hod3)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
#Wickham-2014-Tidy Data-pp.15-19, example-case study
setwd("S:/Projects/DLM Secure/Staff Projects/Emily Projects/5. R_For_Data_Science_Review 20180706/II_Wrangle")
deaths<-read.csv("deaths08.csv.bz2")
head(deaths)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod) #, cod= deaths$cod)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
library(tidyverse)
#hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
hod2 <- count(deaths, deaths$hod, deaths$cod)
library(tidyverse)
#hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
hod2 <- count(deaths, deaths$hod, deaths$cod)
library(tidyverse)
hod2 <- count(deaths, hod = deaths$hod, cod= deaths$cod)
